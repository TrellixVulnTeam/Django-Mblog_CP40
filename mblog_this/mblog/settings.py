"""
Django settings for mblog project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from celery.schedules import crontab
from django.utils.translation import gettext_lazy as _
import time

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# BASE_DIR是指mblog目录下
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#mf7wys61q*lz66rh8=9l(r_9nk*rswvryrngy%r4eocxa^(y0'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = False

ALLOWED_HOSTS = ['syzzjw.cn','101.133.226.138','www.syzzjw.cn']

# Application definition
INSTALLED_APPS = [
    'channels',  # 搭配websocket协议
    'simpleui',  # 强大simpleui的后台管理系统
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # 人性化标签
    'haystack',
    'comment.apps.CommentConfig',  # 评论app
    # 'mainsite.apps.MainsiteConfig',  # 博客主页app
    'mainsite',
    'notes.apps.NotesConfig',  # 笔记app
    'visualize',  # 数据可视化
    'jobs',  # 拉勾网爬虫app
    'captcha',  # 验证码
    'rest_framework',  # restful api
    'mdeditor',  # admin 的markdown神器
    'rest_framework.authtoken',  # tokenAuthentication 令牌验证
    'xadmins',
    'duplicate_checking',  # 查重app
    'inform',  # 通告
]

# SECURITY安全设置 - 支持http时建议开启

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTOCOL", "https")

SECURE_SSL_REDIRECT = True # 将所有非SSL请求永久重定向到SSL

SESSION_COOKIE_SECURE = True # 仅通过https传输cookie

CSRF_COOKIE_SECURE = True # 仅通过https传输cookie

SECURE_HSTS_INCLUDE_SUBDOMAINS = True # 严格要求使用https协议传输

SECURE_HSTS_PRELOAD = True # HSTS为

SECURE_HSTS_SECONDS = 60

SECURE_CONTENT_TYPE_NOSNIFF = True # 防止浏览器猜测资产的内容类型



# AUTH_USER_MODEL = 'xadmins.CustomUser'  # 重写自定义类，<app>.<model>

# 替换了后台登录的认证方法
AUTHENTICATION_BACKENDS = ['xadmins.rewrite_auth_user.EmailBackend', ]  # 重写认证方法,<app>.backends.<ModelBackend>

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',  # 全站缓存，更新缓存，负责在HTTPResponse中添加少部分头部，例如过期时间等，需要搭配CACHE_MIDDLEWARE_SECONDS
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',  # 全站缓存，取出缓存数据，对get和head请求进行缓存，同一个url不同的参数会单独缓存。
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',  # admin书签指南
]

ROOT_URLCONF = 'mblog.urls'

# 模板
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 媒体文件，用于上传imagefield
            ],
        },
    },
]

# 通用网关协议应用
WSGI_APPLICATION = 'mblog.wsgi.application'

# 异步网关协议应用
ASGI_APPLICATION = "mblog.routing.application"
# 用于实现不同consumer间的通信，搭配redis作为存储后端
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": ['redis://:123456@127.0.0.1:6379/5'],
        },
    },
}

# rest_framework的配置
REST_FRAMEWORK = {
    # 限流
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'uploads': '3/day'
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# 搜索引擎
'''
# 采用es搜索引擎
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',  # 指定运行搜索引擎的服务器ip地址
        'INDEX_NAME': 'haystack',  # 指定elasticsearch所建立的索引库的名字
    },
}
'''

# 采用Whoosh作为搜索引擎
HAYSTACK_CONNECTIONS = {
    'default': {
        # 指定使用的搜索引擎
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 指定索引文件存放位置
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 新增的数据自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 设置每页显示的数目，默认为20，可以自己修改
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

# 数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'syz_user',  # 数据库名
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': '123456'
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

# 验证auth密码
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# 语言
LANGUAGES = [
    ('zh-Hans', _('Chinese')),
]

# 编码
LANGUAGE_CODE = 'zh-Hans'

# 时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# 静态文件的url
STATIC_URL = '/static/'

# 用于存放公用静态文件
STATICFILES_DIRS = [
    # 替换反斜杠
    os.path.join(BASE_DIR, 'static').replace('\\', '/'),
    # os.path.join(BASE_DIR),
]

# STATIC_ROOT 用于部署时候将静态文件全部集中存放,根目录从盘区开始，所以尽量使用绝对路径
STATIC_ROOT = 'd:/syz/virtualenvs/MyDjango/mblog/nginx/static/'

# 终端输入python manage.py collectstatic


# celery 设置,用于实例化
# celery 中间人 redis://redis服务所在的ip地址:端口号/数据库号
BROKER_URL = 'redis://:123456@127.0.0.1:6379/0'

# celery结果返回，可用于跟踪结果
CELERY_RESULT_BACKEND = 'redis://:123456@127.0.0.1:6379/1'
CELERY_TASK_SERIALIZER = 'json'  # 任务有关的，例如传进来的参数也要是json格式的，而不能是一个对象实例，除非这个对象实力可序列化
CELERY_RESULT_SERIALIZER = 'json'  # 存储结果是json格式的

# celery时区设置，使用settings中TIME_ZONE同样的时区
CELERY_TIME_ZONE = TIME_ZONE

CELERYBEAT_SCHEDULE = {
    'update_note': {
        'task': 'deploy.tasks.report',
        'schedule': crontab(hour=4, minute=30, day_of_week=1),
    }
}

# 会话session设置
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # 引擎（默认）

SESSION_COOKIE_NAME = "syznb"  # Session的cookie保存在浏览器上时的key，session根据此key来生成，如果不支持cookie，那么也就不支持session
# 浏览器关闭之后清除的是cookie所保存的服务器传下来的sessionid，而不是session，一旦请求头中的sessionid匹配不上服务器中的sessionid，则请求失败。
# 当session过期后，服务器才会传递一个新的session
SESSION_COOKIE_PATH = "/"  # Session的cookie保存的路径（默认）

SESSION_COOKIE_DOMAIN = None  # Session的cookie保存的域名（默认）

SESSION_COOKIE_SECURE = False  # 是否Https传输cookie（默认）

SESSION_COOKIE_HTTPONLY = True  # 是否Session的cookie只支持http传输（默认）

SESSION_COOKIE_AGE = 60 * 60 * 24  # Session的cookie失效日期（30min）（默认），和SESSION_EXPIRE_AT_BROWSER_CLOSE二选一

SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 是否关闭浏览器使得Session过期（默认）

SESSION_SAVE_EVERY_REQUEST = False  # 是否每次请求都保存Session，默认修改之后才保存

# 缓存
CACHES = {
    'default':
        {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://:123456@127.0.0.1:6379/10',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
    'memcache': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'OPTIONS': {
            'server_max_value_length': 1024 * 1024 * 2,  # 支持对象的最大大小的容量
        }
    }
}

# 图片等媒体文件的url
MEDIA_URL = '/media/'  # 方便url使用的目录，与项目中的目录名不一样,同时也用于数据库存储的路径,要加上/来结尾

MEDIA_ROOT = os.path.join(BASE_DIR, r'media')  # 用户上传的文件目录

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# 代理以及端口必须有
EMAIL_HOST = 'smtp.qq.com'  # 发送邮件的stmp服务器
# EMAIL_PORT = 25  # stmp协议的端口号

EMAIL_HOST_USER = '××××××@qq.com'  # 发送邮件的地址

# 本来填的自己的账号密码，但是不行的.
# EMAIL_HOST_PASSWORD =os.environ['PASSWORDD']

EMAIL_HOST_PASSWORD = 'mazstyfnbdbfbjhf'  # 发送邮件的授权码

# 这里的是前缀，也就是头
EMAIL_SUBJECT_PREFIX = u'[Sercheif]'

# EMIAL_USE_TLS = True
# TLS和SSL是互斥的
# TLS是安全传输层协议，是SSL3.0的升级版，它利用对称加密、公私钥不对称加密及其密钥交换算法，CA系统进行加密且可信任的信息传输
# EMAIL_USE_TLS = True  # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
# SSLError [SSL：UNKNOWN_PROTOCOL] unknow如果出现，就将EMAIL_USE_SSL置为False

# SSL是安全套接层协议
EMAIL_PORT = 465  # 搭配SSL
EMAIL_USE_SSL = True  # 使用安全ssl加密，qq企业邮箱要求使用

# 有这个就会显示是你的邮箱，别人收到的邮件中会有这个设定的名称

EMAIL_FROM = '×*博客<×××××××@qq.com>'

X_FRAME_OPTIONS = 'SAMEORIGIN'  # 添加帧格式

# 错误日志文件夹
BASE_DIR_LOG = os.path.join(BASE_DIR, 'logs')

LOGGING = {
    'version': 1,  # 指明dictConfig的版本，目前就只有一个版本
    'disable_existing_loggers': True,  # 禁用所有的已经存在的日志配置
    'formatters': {  # 格式器
        'verbose': {  # 详细的，包括日志等级名，时间，模块，进程，线程和消息
            'format': '%(levelname)s - %(asctime)s - %(module)s - %(funcName)s - %(process)d - %(thread)d - %(message)s',
        },
        'simple': {  # 简单的格式化
            'format': '%(levelname)s - %(funcName)s - %(message)s',
        },
    },
    'filters': {  # 过滤器
        'require_debug_true': {  # 当debug为True的时候，记录
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 处理器，在这里定义了三个处理器
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'comment_handlers': {  # 将error等级的日志写到error文件中
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',  # 详细记录
            'filename': os.path.join(BASE_DIR_LOG, 'comment_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
            'backupCount': 3,  # 备份数量
        },
        'notes_handlers': {
            'level': 'ERROR',
            # 'filters': ['require_debug_true'],
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR_LOG, 'notes_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M,
            'backupCount': 3,
        },
        'mainsite_handlers': {
            'level': 'ERROR',
            # 'filters': ['require_debug_true'],
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR_LOG, 'mainsite_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M,
            'backupCount': 3,
        },
        'visualize_handlers': {
            'level': 'ERROR',
            # 'filters': ['require_debug_true'],
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR_LOG, 'visualize_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M,
            'backupCount': 3,
        },
        'duplicate_handlers': {
            'level': 'ERROR',
            # 'filters': ['require_debug_true'],
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR_LOG, 'duplicate_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M,
            'backupCount': 3,
        },

    },
    'loggers': {  # 定义了二个记录器
        # 默认的logger配置
        'django': {
            'handlers': ['console', ],
            'propagate': True,
            'level': 'INFO',
        },
        'mainsite_': {
            'handlers': ['mainsite_handlers', ],
            'propagate': False,  # 是否向更高级别的logger传递
            'level': 'ERROR',
        },
        'comment_': {
            'handlers': ['comment_handlers', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'notes_': {
            'handlers': ['notes_handlers', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'visualize_': {
            'handlers': ['visualize_handlers', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'duplicate_': {
            'handlers': ['duplicate_handlers', ],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

# simpleui的左侧菜单栏上显示的图标
SIMPLEUI_ICON = {
    '系统管理': 'fab fa-apple',
    '员工管理': 'fas fa-user-tie'
}

# 设置后台logo
SIMPLEUI_LOGO = 'https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/login.jpg'

# 首页跳转地址
SIMPLEUI_INDEX = '/home_page/'

# 隐藏服务器信息
SIMPLEUI_HOME_INFO = False

# 隐藏最近动作
SIMPLEUI_HOME_ACTION = True

# 自定义菜单
# http://127.0.0.1:8000/admin/notes/#/admin/notes/note/
SIMPLEUI_CONFIG = {
    'system_keep': False,  # 默认不保留admin的菜单
    'menu_display': ['用户动态', '文章管理', '留言管理', '职位查询', '个人信息', '公告管理', '可视化展示'],
    # 开启排序和过滤功能, 不填此字段为默认排序和全部显示, 空列表[] 为全部不显示.
    'dynamic': False,  # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时动态展示菜单内容
    'menus': [
        {
            'name': '用户动态',
            'icon': 'fas fa-code',
            'models': [{
                'name': '七天内的登录记录',
                'icon': 'fas fa-code',
                'url': '/admin/mainsite/ips/'
            }, {
                'name': '留言管理',
                'icon': 'fas fa-code',
                'url': '/admin/comment/message/',
            }, {
                'name': '留言回复管理',
                'icon': 'fas fa-code',
                'url': '/admin/comment/message_reply/',
            }, {
                'name': '用户信息查询',
                'icon': 'fas fa-code',
                'url': '/admin/auth/user/',
            }]
        }, {
            'app': 'notes',
            'name': '文章管理',
            'icon': 'fas fa-code',
            'models': [{  # 子菜单
                'name': '撰写文章',
                'icon': 'fa fa-user',
                'url': '/admin/notes/note/',
            }, {
                'name': '文章评论管理',
                'icon': 'fa fa-user',
                'url': '/admin/notes/note_criticism/'
            }, {
                'name': '文章评论回复管理',
                'icon': 'fa fa-user',
                'url': '/admin/notes/note_reply/'
            }]
        }, {
            'name': '留言板管理',
            'icon': 'fa fa-file',
            'models': [{
                'name': '留言管理',
                'url': '/admin/comment/message_reply/',
                'icon': 'far fa-surprise',
            }, {
                'name': '回复管理',
                'url': '/admin/comment/message/',
                'icon': 'fab fa-github'
            }]
        }, {
            'name': '公告管理',
            'icon': 'fa fa-user',
            'url': '/admin/inform/inform/',
        }
        , {
            'name': '职位查询',
            'icon': 'fa fa-desktop',
            'url': '/admin/visualize/lagou/',
        }, {
            'name': '个人信息',
            'icon': 'fa fa-desktop',
            'models': [{
                'name': '修改资料',
                'url': '/admin/mainsite/information',
                'icon': 'far fa-surprise'
            }, {
                'name': '密码修改',
                'icon': 'fa fa-desktop',
                'url': '/admin/password_change/'
            }]
        }, {
            'name': '可视化展示',
            'icon': 'fa fa-desktop',
            'models': [{
                'name': '利用pyecharts绘制',
                'url': '/visualize/user_analysis/data_analysis/id=自定义图表/',
                'icon': 'fa fa-desktop'
            }, {
                'name': '博主成绩分析（司云中）',
                'url': '/visualize/user_analysis/data_analysis/id=成绩分析/',
                'icon': 'fa fa-desktop'
            }, {
                'name': '拉勾网数据30000+分析（纯学习使用，不用于商业用途）',
                'url': '/visualize/user_analysis/data_analysis/id=拉勾网数据分析/',
                'icon': 'fa fa-desktop'
            }, {
                'name': '拉勾网数据30000+数据展示（纯学习使用，不用于商业用途）',
                'url': '/visualize/user_analysis/data_analysis/id=拉勾网数据展示/',
                'icon': 'fa fa-desktop'
            }, {
                'name': '操作系统进程调度算法性能比较',
                'url': '/visualize/user_analysis/data_analysis/id=进程调度算法/',
                'icon': 'fa fa-desktop'
            }]
        }]
}

