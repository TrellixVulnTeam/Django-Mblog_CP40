from ..globals import CurrentConfig, RenderType, ThemeType
from ..options.series_options import (
    BasicOpts,
    JSFunc,
    LabelOpts,
    LineStyleOpts,
    Numeric,
    Optional,
    Sequence,
    SplitAreaOpts,
    SplitLineOpts,
    TextStyleOpts,
    Union,
)


# echarts动画配置项
class AnimationOpts(BasicOpts):
    def __init__(
            self,
            # 是否开启动画，默认为True开启
            animation: bool = True,
            # 是否开启动画的阀值，当某个系列的动画数量超过这个阀值，就会关闭这个动画
            animation_threshold: Numeric = 2000,
            # 初始动画的时长，默认值为 1000。
            # 支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果：
            animation_duration: Union[Numeric, JSFunc] = 1000,
            # 初始动画的缓动效果。
            animation_easing: Union[str] = "cubicOut",
            # 初始动画的延迟，默认值为 0
            animation_delay: Union[Numeric, JSFunc] = 0,
            # 数据更新动画的时长，默认值为 300。
            animation_duration_update: Union[Numeric, JSFunc] = 300,
            # 数据更新动画的缓动效果。
            animation_easing_update: Union[Numeric] = "cubicOut",
            # 数据更新动画的延迟，默认值为 0。
            animation_delay_update: Union[Numeric, JSFunc] = 0,
    ):
        self.opts: dict = {
            "animation": animation,
            "animationThreshold": animation_threshold,
            "animationDuration": animation_duration,
            "animationEasing": animation_easing,
            "animationDelay": animation_delay,
            "animationDurationUpdate": animation_duration_update,
            "animationEasingUpdate": animation_easing_update,
            "animationDelayUpdate": animation_delay_update,
        }


# 初始化配置项
class InitOpts(BasicOpts):
    def __init__(
            self,
            # 图表画布宽度：css长度单位
            width: str = "900px",
            # 图表画布高度，css 长度单位。
            height: str = "500px",
            # 图表 ID，图表唯一标识，用于在多图表时区分。
            chart_id: Optional[str] = None,
            # 渲染风格，可选 "canvas", "svg"
            # # 参考 `全局变量` 章节
            renderer: str = RenderType.CANVAS,
            # 网页标题
            page_title: str = CurrentConfig.PAGE_TITLE,
            # 图表主题
            theme: str = ThemeType.WHITE,
            # 图标背景颜色
            bg_color: Union[str, dict] = None,
            # 远程 js host，如不设置默认为 https://assets.pyecharts.org/assets/"
            # 参考 `全局变量` 章节
            js_host: str = "",
            # 画图动画初始化配置，参考 `global_options.AnimationOpts`
            animation_opts: Union[AnimationOpts, dict] = AnimationOpts(),
    ):
        self.opts: dict = {
            "width": width,
            "height": height,
            "chart_id": chart_id,
            "renderer": renderer,
            "page_title": page_title,
            "theme": theme,
            "bg_color": bg_color,
            "js_host": js_host,
            "animationOpts": animation_opts,
        }


# 工具箱工具配置项
class ToolBoxFeatureOpts(BasicOpts):
    def __init__(
            self,
            # 保存为图片
            save_as_image: Optional[dict] = None,
            # 配置项还原
            restore: Optional[dict] = None,
            # 数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新
            data_view: Optional[dict] = None,
            # 数据区域缩放。目前只支持直角坐标系的缩放
            data_zoom: Optional[dict] = None,
    ):
        if not save_as_image:
            save_as_image = {"show": True, "title": "save as image", "type": "png"}
        if not restore:
            restore = {"show": True, "title": "restore"}
        if not data_view:
            data_view = {"show": True, "title": "data view", "readOnly": False}  # 如果不想别人修改，就设置readOnly为True
        if not data_zoom:
            data_zoom = {
                "show": True,
                "title": {"zoom": "data zoom", "back": "data zoom restore"},
            }

        self.opts: dict = {
            "saveAsImage": save_as_image,
            "restore": restore,
            "dataView": data_view,
            "dataZoom": data_zoom,
        }


# 组件箱配置项（工具布局）
class ToolboxOpts(BasicOpts):
    def __init__(
            self,
            # 是否显示工具栏组件
            is_show: bool = True,
            # 工具栏 icon 的布局朝向。
            # 可选：'horizontal', 'vertical'
            orient: str = "horizontal",
            # 每个组件项的大小
            item_size: Numeric = 15,
            # 每个组件项的空隙
            item_gap: Numeric = 10,
            # 组件工具栏相对于容器的左部位置
            pos_left: str = "80%",
            # 组件工具栏相对于容器的右部位置
            pos_right: Optional[str] = None,
            # 组件工具栏相对于容器的上部位置
            pos_top: Optional[str] = None,
            # 组件工具栏相对于容器的下部位置
            pos_bottom: Optional[str] = None,
            #  适应到各个工具的配置项上
            feature: Union[ToolBoxFeatureOpts, dict] = ToolBoxFeatureOpts(),
    ):
        self.opts: dict = {
            "show": is_show,
            "orient": orient,
            "itemSize": item_size,
            "itemGap": item_gap,
            "left": pos_left,
            "right": pos_right,
            "top": pos_top,
            "bottom": pos_bottom,
            "feature": feature,
        }


# 区域选择组件配置项
class BrushOpts(BasicOpts):
    def __init__(
            self,
            # 使用在 toolbox 中的按钮。默认值为 ["rect", "polygon", "keep", "clear"]
            # brush 相关的 toolbox 按钮有：
            # "rect"：开启矩形选框选择功能。
            # "polygon"：开启任意形状选框选择功能。
            # "lineX"：开启横向选择功能。
            # "lineY"'：开启纵向选择功能。
            # "keep"：切换『单选』和『多选』模式。后者可支持同时画多个选框。前者支持单击清除所有选框。
            # "clear"：清空所有选框。
            tool_box: Optional[Sequence] = None,

            # 不同系列间，选中的项可以联动。
            # brush_link 配置项是一个列表，内容是 seriesIndex，指定了哪些 series 可以被联动。
            # 例如可以是：
            # [3, 4, 5] 表示 seriesIndex 为 3, 4, 5 的 series 可以被联动。
            # "all" 表示所有 series 都进行 brushLink。
            # None 表示不启用 brush_link 功能。
            brush_link: Union[Sequence, str] = None,

            # 指定哪些 series 可以被刷选，可取值为：
            # "all": 所有 series
            # series index 列表, 如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。
            # 某个 series index, 如 0，表示这个 index 所对应的坐标系。
            series_index: Union[Sequence, Numeric, str] = None,

            # 指定哪些 geo 可以被刷选。可以设置 brush 是全局的还是属于坐标系的。
            # 全局 brush
            # 在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为坐标系 brush，就是全局 brush。
            # 坐标系 brush
            # 在指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（ roam 和 dataZoom ）而移动。
            # 坐标系 brush 实际更为常用，尤其是在 geo 中。
            # 通过指定 brush.geoIndex 或 brush.xAxisIndex 或 brush.yAxisIndex 来规定可以在哪些坐标系中进行刷选。
            # 指定哪些 series 可以被刷选，可取值为：
            # "all": 表示所有 series
            # series index 列表, 如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。
            # 某个 series index, 如 0，表示这个 index 所对应的坐标系。
            geo_index: Union[Sequence, Numeric, str] = None,

            # 指定哪些 xAxisIndex 可以被刷选。可以设置 brush 是全局的还是属于坐标系的。
            # 全局 brush
            # 在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为坐标系 brush，就是全局 brush。
            # 坐标系 brush
            # 在指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（ roam 和 dataZoom ）而移动。
            # 坐标系 brush 实际更为常用，尤其是在 geo 中。
            # 通过指定 brush.geoIndex 或 brush.xAxisIndex 或 brush.yAxisIndex 来规定可以在哪些坐标系中进行刷选。
            # 指定哪些 series 可以被刷选，可取值为：
            # "all": 表示所有 series
            # series index 列表, 如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。
            # 某个 series index, 如 0，表示这个 index 所对应的坐标系。
            x_axis_index: Union[Sequence, Numeric, str] = None,

            # 指定哪些 yAxisIndex 可以被刷选。可以设置 brush 是全局的还是属于坐标系的。
            # 全局 brush
            # 在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为坐标系 brush，就是全局 brush。
            # 坐标系 brush
            # 在指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（ roam 和 dataZoom ）而移动。
            # 坐标系 brush 实际更为常用，尤其是在 geo 中。
            # 通过指定 brush.geoIndex 或 brush.xAxisIndex 或 brush.yAxisIndex 来规定可以在哪些坐标系中进行刷选。
            # 指定哪些 series 可以被刷选，可取值为：
            # "all": 表示所有 series
            # series index 列表, 如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。
            # 某个 series index, 如 0，表示这个 index 所对应的坐标系。
            y_axis_index: Union[Sequence, Numeric, str] = None,

            # 默认的刷子类型。默认值为 rect。
            # 可选参数如下：
            # "rect"：矩形选框。
            # "polygon"：任意形状选框。
            # "lineX"：横向选择。
            # "lineY"：纵向选择。
            brush_type: str = "rect",

            # 默认的刷子的模式。可取值为：
            # 默认为 single
            # "single"：单选。
            # "multiple"：多选。
            brush_mode: str = "single",

            # 已经选好的选框是否可以被调整形状或平移。默认值为 True
            transformable: bool = True,

            # 选框的默认样式，值为
            # {
            #      "borderWidth": 1,
            #      "color": "rgba(120,140,180,0.3)",
            #      "borderColor": "rgba(120,140,180,0.8)"
            # },
            brush_style: Optional[dict] = None,
            # 默认情况，刷选或者移动选区的时候，会不断得发 brushSelected 事件，从而告诉外界选中的内容。
            # 但是频繁的事件可能导致性能问题，或者动画效果很差。
            # 所以 brush 组件提供了 brush.throttleType，brush.throttleDelay 来解决这个问题。
            # throttleType 取值可以是：
            # "debounce"：表示只有停止动作了（即一段时间没有操作了），才会触发事件。时间阈值由 brush.throttleDelay 指定。
            # "fixRate"：表示按照一定的频率触发事件，时间间隔由 brush.throttleDelay 指定。
            throttle_type: str = "fixRate",

            # 默认为 0 表示不开启 throttle。
            throttle_delay: Numeric = 0,
            # 在 brush_mode 为 "single" 的情况下，是否支持单击清除所有选框。
            remove_on_click: bool = True,
            # 定义在选中范围外的视觉元素。最终参数以字典的形式进行配置
            # 可选的视觉元素有：
            # symbol: 图元的图形类别。
            # symbolSize: 图元的大小。
            # color: 图元的颜色。
            # colorAlpha: 图元的颜色的透明度。
            # opacity: 图元以及其附属物（如文字标签）的透明度。
            # colorLightness: 颜色的明暗度，参见 https://en.wikipedia.org/wiki/HSL_and_HSV。
            # colorSaturation: 颜色的饱和度，参见 https://en.wikipedia.org/wiki/HSL_and_HSV。
            # colorHue: 颜色的色调，参见 https://en.wikipedia.org/wiki/HSL_and_HSV。
            out_of_brush: dict = None,
    ):
        if tool_box is None:
            tool_box = ["rect", "polygon", "keep", "clear"]

        if brush_style is None:
            brush_style = {
                "borderWidth": 1,
                "color": "rgba(120,140,180,0.3)",
                "borderColor": "rgba(120,140,180,0.8)",
            }

        self.opts: dict = {
            "toolbox": tool_box,
            "brushLink": brush_link,
            "seriesIndex": series_index,
            "geoIndex": geo_index,
            "xAxisIndex": x_axis_index,
            "yAxisIndex": y_axis_index,
            "brushType": brush_type,
            "brushMode": brush_mode,
            "transformable": transformable,
            "brushStyle": brush_style,
            "throttleType": throttle_type,
            "throttleDelay": throttle_delay,
            "removeOnClick": remove_on_click,
            "outOfBrush": out_of_brush,
        }


class TitleOpts(BasicOpts):
    def __init__(
            self,
            # 主标题文本，支持使用 \n 换行。
            title: Optional[str] = None,

            # 主标题跳转 URL 链接
            title_link: Optional[str] = None,

            # 主标题跳转链接方式
            # 默认值是: blank
            # 可选参数: 'self', 'blank'
            # 'self' 当前窗口打开; 'blank' 新窗口打开
            title_target: Optional[str] = None,

            # 副标题文本，支持使用 \n 换行。
            subtitle: Optional[str] = None,

            # 副标题跳转 URL 链接
            subtitle_link: Optional[str] = None,

            # 副标题跳转链接方式
            # 默认值是: blank
            # 可选参数: 'self', 'blank'
            # 'self' 当前窗口打开; 'blank' 新窗口打开
            subtitle_target: Optional[str] = None,

            # title 组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Optional[str] = None,

            # title 组件离容器左侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_right: Optional[str] = None,

            # title 组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Optional[str] = None,

            # title 组件离容器上侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_bottom: Optional[str] = None,

            # 主标题字体样式配置项，参考 `series_options.TextStyleOpts
            title_textstyle_opts: Union[TextStyleOpts, dict, None] = None,

            # 副标题字体样式配置项，参考 `series_options.TextStyleOpts`
            subtitle_textstyle_opts: Union[TextStyleOpts, dict, None] = None,
    ):
        self.opts: Sequence = [
            {
                "text": title,
                "link": title_link,
                "target": title_target,
                "subtext": subtitle,
                "sublink": subtitle_link,
                "subtarget": subtitle_target,
                "left": pos_left,
                "right": pos_right,
                "top": pos_top,
                "bottom": pos_bottom,
                "textStyle": title_textstyle_opts,
                "subtextStyle": subtitle_textstyle_opts,
            }
        ]


# 匹配缩放配置项
class DataZoomOpts(BasicOpts):
    def __init__(
            self,

            # 是否显示 组件。如果设置为 false，不会显示，但是数据过滤的功能还存在。
            is_show: bool = True,

            # 组件类型，可选 "slider", "inside"
            type_: str = "slider",

            # 拖动时，是否实时更新系列的视图。如果设置为 false，则只在拖拽结束的时候更新。
            is_realtime: bool = True,

            # 数据窗口范围的起始百分比。范围是：0 ~ 100。表示 0% ~ 100%。
            range_start: Numeric = 20,

            # 数据窗口范围的结束百分比。范围是：0 ~ 100
            range_end: Numeric = 80,

            # 数据窗口范围的起始数值。如果设置了 start 则 startValue 失效。
            start_value: Union[int, str, None] = None,

            # 数据窗口范围的结束数值。如果设置了 start 则 startValue 失效。
            end_value: Union[int, str, None] = None,

            # 数据窗口范围的起始数值。如果设置了 start 则 startValue 失效。
            orient: str = "horizontal",

            # 设置 dataZoom-inside 组件控制的 x 轴（即 xAxis，是直角坐标系中的概念，参见 grid）。
            # 不指定时，当 dataZoom-inside.orient 为 'horizontal'时，默认控制和 dataZoom 平行的第一个 xAxis
            # 如果是 number 表示控制一个轴，如果是 Array 表示控制多个轴
            xaxis_index: Union[int, Sequence[int], None] = None,

            # 设置 dataZoom-inside 组件控制的 y 轴（即 yAxis，是直角坐标系中的概念，参见 grid）。
            # 不指定时，当 dataZoom-inside.orient 为 'horizontal'时，默认控制和 dataZoom 平行的第一个 yAxis
            # 如果是 number 表示控制一个轴，如果是 Array 表示控制多个轴。
            yaxis_index: Union[int, Sequence[int], None] = None,

            # 是否锁定选择区域（或叫做数据窗口）的大小。
            # 如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。
            is_zoom_lock: bool = False,

            # dataZoom-slider 组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为 'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Optional[str] = None,

            # dataZoom-slider 组件离容器左侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为 'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_right: Optional[str] = None,

            # dataZoom-slider 组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为 'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Optional[str] = None,

            # dataZoom-slider 组件离容器上侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为 'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_bottom: Optional[str] = None,
    ):
        self.opts: dict = {
            "show": is_show,
            "type": type_,
            "realtime": is_realtime,
            "startValue": start_value,
            "endValue": end_value,
            "start": range_start,
            "end": range_end,
            "orient": orient,
            "xAxisIndex": xaxis_index,
            "yAxisIndex": yaxis_index,
            "zoomLock": is_zoom_lock,
            "left": pos_left,
            "right": pos_right,
            "top": pos_top,
            "bottom": pos_bottom,
        }


# 图例配置项
class LegendOpts(BasicOpts):
    def __init__(
            self,
            # 图例的类型。可选值：
            # 'plain'：普通图例。缺省就是普通图例。
            # 'scroll'：可滚动翻页的图例。当图例数量较多时可以使用。
            type_: Optional[str] = None,

            # 图例选择的模式，控制是否可以通过点击图例改变系列的显示状态。默认开启图例选择，可以设成 false 关闭
            # 除此之外也可以设成 'single' 或者 'multiple' 使用单选或者多选模式。
            selected_mode: Union[str, bool, None] = None,

            # 是否显示图例组件
            is_show: bool = True,

            # 图例组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Union[str, Numeric, None] = None,

            # 图例组件离容器右侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_right: Union[str, Numeric, None] = None,

            # 图例组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Union[str, Numeric, None] = None,

            # 图例组件离容器下侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_bottom: Union[str, Numeric, None] = None,

            # 图例列表的布局朝向。可选：'horizontal', 'vertical'
            orient: Optional[str] = None,

            # 图例标记和文本的对齐。默认自动（auto）
            # 根据组件的位置和 orient 决定
            # 当组件的 left 值为 'right' 以及纵向布局（orient 为 'vertical'）的时候为右对齐，即为 'right'。
            # 可选参数: `auto`, `left`, `right`
            align: Optional[str] = None,

            # 图例内边距，单位px，默认各方向内边距为5
            padding: int = 5,

            # 图例每项之间的间隔。横向布局时为水平间隔，纵向布局时为纵向间隔。
            # 默认间隔为 10
            item_gap: int = 10,

            # 图例标记的图形宽度。默认宽度为 25
            item_width: int = 25,

            # 图例标记的图形高度。默认高度为 14
            item_height: int = 14,

            # 图例关闭时的颜色。默认是 #ccc
            inactive_color: Optional[str] = None,

            # 图例组件字体样式，参考 `series_options.TextStyleOpts`
            textstyle_opts: Union[TextStyleOpts, dict, None] = None,

            # 图例项的 icon。
            # ECharts 提供的标记类型包括 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
            # 可以通过 'image://url' 设置为图片，其中 URL 为图片的链接，或者 dataURI。
            # 可以通过 'path://' 将图标设置为任意的矢量路径。
            legend_icon: Optional[str] = None,
    ):
        self.opts: dict = {
            "type": type_,
            "selectedMode": selected_mode,
            "show": is_show,
            "left": pos_left,
            "right": pos_right,
            "top": pos_top,
            "bottom": pos_bottom,
            "orient": orient,
            "align": align,
            "padding": padding,
            "itemGap": item_gap,
            "itemWidth": item_width,
            "itemHeight": item_height,
            "inactiveColor": inactive_color,
            "textStyle": textstyle_opts,
            "icon": legend_icon,
        }


# 视觉映射配置项
class VisualMapOpts(BasicOpts):
    def __init__(
            self,

            # 是否显示视觉映射配置
            is_show: bool = True,

            # 映射过渡类型，可选，"color", "size"
            type_: str = "color",

            # 指定 visualMapPiecewise 组件的最小值。
            min_: Numeric = 0,

            # 指定 visualMapPiecewise 组件的最大值。
            max_: Numeric = 100,

            # 两端的文本，如['High', 'Low']。
            range_text: Optional[Sequence] = None,

            # visualMap 组件过渡颜色
            range_color: Optional[Sequence[str]] = None,

            # visualMap 组件过渡 symbol 大小
            range_size: Optional[Sequence[int]] = None,

            # 如何放置 visualMap 组件，水平（'horizontal'）或者竖直（'vertical'）。
            orient: str = "vertical",

            # visualMap 组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Optional[str] = None,

            # visualMap 组件离容器右侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_right: Optional[str] = None,

            # visualMap 组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Optional[str] = None,

            # visualMap 组件离容器下侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_bottom: Optional[str] = None,

            # 对于连续型数据，自动平均切分成几段。默认为5段。连续数据的范围需要 max 和 min 来指定
            split_number: int = 5,

            # 对于连续型数据，自动平均切分成几段。默认为5段。连续数据的范围需要 max 和 min 来指定
            series_index: Union[Numeric, Sequence, None] = None,

            # 组件映射维度
            dimension: Optional[Numeric] = None,

            # 是否显示拖拽用的手柄（手柄能拖拽调整选中范围）。
            is_calculable: bool = True,

            # 是否为分段型
            is_piecewise: bool = False,

            # 自定义的每一段的范围，以及每一段的文字，以及每一段的特别的样式。例如：
            # pieces: [
            #   {"min": 1500}, // 不指定 max，表示 max 为无限大（Infinity）。
            #   {"min": 900, "max": 1500},
            #   {"min": 310, "max": 1000},
            #   {"min": 200, "max": 300},
            #   {"min": 10, "max": 200, "label": '10 到 200（自定义label）'},
            #   {"value": 123, "label": '123（自定义特殊颜色）', "color": 'grey'}, //表示 value 等于 123 的情况
            #   {"max": 5}     // 不指定 min，表示 min 为无限大（-Infinity）。
            # ]
            pieces: Optional[Sequence] = None,

            # 定义 在选中范围外 的视觉元素。（用户可以和 visualMap 组件交互，用鼠标或触摸选择范围）
            #  可选的视觉元素有：
            #  symbol: 图元的图形类别。
            #  symbolSize: 图元的大小。
            #  color: 图元的颜色。
            #  colorAlpha: 图元的颜色的透明度。
            #  opacity: 图元以及其附属物（如文字标签）的透明度。
            #  colorLightness: 颜色的明暗度，参见 HSL。
            #  colorSaturation: 颜色的饱和度，参见 HSL。
            #  colorHue: 颜色的色调，参见 HSL。
            out_of_range: Optional[Sequence] = None,

            # 图形的宽度，即长条的宽度。
            item_width: int = 0,

            # 图形的高度，即长条的高度。
            item_height: int = 0,

            # 文字样式配置项，参考 `series_options.TextStyleOpts`
            textstyle_opts: Union[TextStyleOpts, dict, None] = None,
    ):
        _inrange_op: dict = {}
        if type_ == "color":
            range_color = range_color or ["#50a3ba", "#eac763", "#d94e5d"]
            _inrange_op.update(color=range_color)
        elif type_ == "size":
            range_size = range_size or [20, 50]
            _inrange_op.update(symbolSize=range_size)

        _visual_typ = "piecewise" if is_piecewise else "continuous"

        if is_piecewise and item_width == 0 and item_height == 0:
            item_width, item_height = 20, 14
        elif item_width == 0 and item_height == 0:
            item_width, item_height = 20, 140

        self.opts: dict = {
            "show": is_show,
            "type": _visual_typ,
            "min": min_,
            "max": max_,
            "text": range_text,
            "textStyle": textstyle_opts,
            "inRange": _inrange_op,
            "calculable": is_calculable,
            "splitNumber": split_number,
            "dimension": dimension,
            "seriesIndex": series_index,
            "orient": orient,
            "left": pos_left,
            "top": pos_top,
            "bottom": pos_bottom,
            "right": pos_right,
            "showLabel": True,
            "itemWidth": item_width,
            "itemHeight": item_height,
            "outOfRange": out_of_range,
        }
        if is_piecewise:
            self.opts.update(pieces=pieces)


# 提示框配置项
class TooltipOpts(BasicOpts):
    def __init__(
            self,

            # 是否显示提示框组件，包括提示框浮层和 axisPointer。
            is_show: bool = True,

            # 触发类型。可选：
            # 'item': 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。
            # 'axis': 坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。
            # 'none': 什么都不触发
            trigger: str = "item",

            # 提示框触发的条件，可选：
            # 'mousemove': 鼠标移动时触发。
            # 'click': 鼠标点击时触发。
            # 'mousemove|click': 同时鼠标移动和点击时触发。
            # 'none': 不在 'mousemove' 或 'click' 时触发，
            trigger_on: str = "mousemove|click",

            # 指示器类型。可选
            # 'line'：直线指示器
            # 'shadow'：阴影指示器
            # 'none'：无指示器
            # 'cross'：十字准星指示器。其实是种简写，表示启用两个正交的轴的 axisPointer。
            axis_pointer_type: str = "line",

            # 标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \n 换行。
            # 字符串模板 模板变量有：
            # {a}：系列名。
            # {b}：数据名。
            # {c}：数据值。
            # {@xxx}：数据中名为 'xxx' 的维度的值，如 {@product} 表示名为 'product'` 的维度的值。
            # {@[n]}：数据中维度 n 的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。
            # 示例：formatter: '{b}: {@score}'
            #
            # 回调函数，回调函数格式：
            # (params: Object|Array) => string
            # 参数 params 是 formatter 需要的单个数据集。格式如下：
            # {
            #    componentType: 'series',
            #    // 系列类型
            #    seriesType: string,
            #    // 系列在传入的 option.series 中的 index
            #    seriesIndex: number,
            #    // 系列名称
            #    seriesName: string,
            #    // 数据名，类目名
            #    name: string,
            #    // 数据在传入的 data 数组中的 index
            #    dataIndex: number,
            #    // 传入的原始数据项
            #    data: Object,
            #    // 传入的数据值
            #    value: number|Array,
            #    // 数据图形的颜色
            #    color: string,
            # }
            formatter: Optional[JSFunc] = None,

            # 提示框浮层的背景颜色。
            background_color: Optional[str] = None,

            # 提示框浮层的边框颜色。
            border_color: Optional[str] = None,

            # 提示框浮层的边框宽。
            border_width: Numeric = 0,

            # 文字样式配置项，参考 `series_options.TextStyleOpts`
            textstyle_opts: TextStyleOpts = TextStyleOpts(font_size=14),
    ):
        self.opts: dict = {
            "show": is_show,
            "trigger": trigger,
            "triggerOn": trigger_on,
            "axisPointer": {"type": axis_pointer_type},
            "formatter": formatter,
            "textStyle": textstyle_opts,
            "backgroundColor": background_color,
            "borderColor": border_color,
            "borderWidth": border_width,
        }


# 坐标轴轴线配置项
class AxisLineOpts(BasicOpts):
    def __init__(
            self,

            # 是否显示坐标轴轴线
            is_show: bool = True,

            # X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效。
            is_on_zero: bool = True,

            # 当有双轴时，可以用这个属性手动指定，在哪个轴的 0 刻度上。
            on_zero_axis_index: int = 0,

            # 轴线两边的箭头。可以是字符串，表示两端使用同样的箭头；或者长度为 2 的字符串数组，分别表示两端的箭头。
            # 默认不显示箭头，即 'none'。
            # 两端都显示箭头可以设置为 'arrow'。
            # 只在末端显示箭头可以设置为 ['none', 'arrow']。
            symbol: Optional[str] = None,

            # 坐标轴线风格配置项，参考 `series_optionsLineStyleOpts`
            linestyle_opts: Union[LineStyleOpts, dict, None] = None,
    ):
        self.opts: dict = {
            "show": is_show,
            "onZero": is_on_zero,
            "onZeroAxisIndex": on_zero_axis_index,
            "symbol": symbol,
            "lineStyle": linestyle_opts,
        }


# 坐标轴刻度配置项
class AxisTickOpts(BasicOpts):
    def __init__(
            self,

            # 是否显示坐标轴刻度。
            is_show: bool = True,
            # 类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐。
            is_align_with_label: bool = False,

            # 是否坐标轴在内部。
            is_inside: bool = False,

            # 坐标轴刻度的长度。
            length: Optional[Numeric] = None,

            # 坐标轴线风格配置项，参考 `series_optionsLineStyleOpts`
            linestyle_opts: Union[LineStyleOpts, dict, None] = None,
    ):
        self.opts: dict = {
            "show": is_show,
            "alignWithLabel": is_align_with_label,
            "inside": is_inside,
            "length": length,
            "lineStyle": linestyle_opts,
        }


# 坐标轴指向器配置项
class AxisPointerOpts(BasicOpts):
    def __init__(
            self,
            # 默认不显示坐标轴指示器
            is_show: bool = False,

            # 不同轴的 axisPointer 可以进行联动，在这里设置。联动表示轴能同步一起活动。
            # 轴依据他们的 axisPointer 当前对应的值来联动。
            # link 是一个数组，其中每一项表示一个 link group，一个 group 中的坐标轴互相联动。
            # 具体使用方式可以参见：https://www.echartsjs.com/option.html#axisPointer.link
            link: Sequence[dict] = None,

            # 指示器类型。
            # 可选参数如下，默认为 'line'
            # 'line' 直线指示器
            # 'shadow' 阴影指示器
            # 'none' 无指示器
            type_: str = "line",

            # 坐标轴指示器的文本标签，坐标轴标签配置项，参考 `series_options.LabelOpts`
            label: Union[LabelOpts, dict, None] = None,

            # 坐标轴线风格配置项，参考 `series_optionsLineStyleOpts`
            linestyle_opts: Union[LineStyleOpts, dict, None] = None,
    ):
        self.opts: dict = {
            "show": is_show,
            "type": type_,
            "link": link,
            "label": label,
            "lineStyle": linestyle_opts,
        }


# 坐标轴配置项
class AxisOpts(BasicOpts):
    def __init__(
            self,

            # 坐标轴类型。可选：
            # 'value': 数值轴，适用于连续数据。
            # 'category': 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。
            # 'time': 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，
            # 例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。
            # 'log' 对数轴。适用于对数数据。
            type_: Optional[str] = None,

            # 坐标轴名称
            name: Optional[str] = None,

            # 是否显示x轴
            is_show: bool = True,

            # 只在数值轴中（type: 'value'）有效。
            # 是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。
            # 在设置 min 和 max 之后该配置项无效。
            is_scale: bool = False,

            # 是否强制设置坐标轴分割间隔。
            is_inverse: bool = False,

            # 坐标轴名称显示位置。可选：
            # 'start', 'middle' 或者 'center','end'
            name_location: str = "end",

            # 坐标轴名称与轴线之间的距离。
            name_gap: Numeric = 15,

            # 坐标轴名字旋转，角度值。
            name_rotate: Optional[Numeric] = None,

            # 强制设置坐标轴分割间隔。
            # 因为 splitNumber 是预估的值，实际根据策略计算出来的刻度可能无法达到想要的效果，
            # 这时候可以使用 interval 配合 min、max 强制设定刻度划分，一般不建议使用。
            # 无法在类目轴中使用。在时间轴（type: 'time'）中需要传时间戳，在对数轴（type: 'log'）中需要传指数值。
            interval: Optional[Numeric] = None,

            # x 轴所在的 grid 的索引，默认位于第一个 grid。
            grid_index: Numeric = 0,

            # x 轴的位置。可选：
            # 'top', 'bottom'
            # 默认 grid 中的第一个 x 轴在 grid 的下方（'bottom'），第二个 x 轴视第一个 x 轴的位置放在另一侧。
            position: Optional[str] = None,

            # Y 轴相对于默认位置的偏移，在相同的 position 上有多个 Y 轴的时候有用。 offset偏移量
            offset: Numeric = 0,

            # 坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整
            split_number: Numeric = 5,

            # 坐标轴两边留白策略，类目轴和非类目轴的设置和表现不一样。
            # 类目轴中 boundaryGap 可以配置为 true 和 false。默认为 true，这时候刻度只是作为分隔线，
            # 标签和数据点都会在两个刻度之间的带(band)中间。
            # 非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围
            # 可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效。 示例：boundaryGap: ['20%', '20%']
            boundary_gap: Union[str, bool, None] = None,

            # 坐标轴刻度最小值。
            # 可以设置成特殊值 'dataMin'，此时取数据在该轴上的最小值作为最小刻度。
            # 不设置时会自动计算最小值保证坐标轴刻度的均匀分布。
            # 在类目轴中，也可以设置为类目的序数（如类目轴 data: ['类A', '类B', '类C'] 中，序数 2 表示 '类C'。
            # 也可以设置为负数，如 -3）。
            min_: Union[Numeric, str, None] = None,

            # 坐标轴刻度最大值。
            # 可以设置成特殊值 'dataMax'，此时取数据在该轴上的最大值作为最大刻度。
            # 不设置时会自动计算最大值保证坐标轴刻度的均匀分布。
            # 在类目轴中，也可以设置为类目的序数（如类目轴 data: ['类A', '类B', '类C'] 中，序数 2 表示 '类C'。
            # 也可以设置为负数，如 -3）。
            max_: Union[Numeric, str, None] = None,

            # 自动计算的坐标轴最小间隔大小。
            # 例如可以设置成1保证坐标轴分割刻度显示成整数。
            # 默认值是 0
            min_interval: Numeric = 0,

            # 自动计算的坐标轴最大间隔大小。
            # 例如，在时间轴（（type: 'time'））可以设置成 3600 * 24 * 1000 保证坐标轴分割刻度最大为一天。
            max_interval: Optional[Numeric] = None,

            # 坐标轴刻度线配置项，参考 `global_options.AxisLineOpts`
            axisline_opts: Union[AxisLineOpts, dict, None] = None,

            # 坐标轴刻度配置项，参考 `global_options.AxisTickOpts`
            axistick_opts: Union[AxisTickOpts, dict, None] = None,

            # 坐标轴标签配置项，参考 `series_options.LabelOpts`
            axislabel_opts: Union[LabelOpts, dict, None] = None,

            # 坐标轴指示器配置项，参考 `global_options.AxisPointerOpts`
            axispointer_opts: Union[AxisPointerOpts, dict, None] = None,

            # 坐标轴指示器配置项，参考 `global_options.AxisPointerOpts`
            name_textstyle_opts: Union[TextStyleOpts, dict, None] = None,

            # 分割区域配置项，参考 `series_options.SplitAreaOpts`
            splitarea_opts: Union[SplitAreaOpts, dict, None] = None,

            # 分割线配置项，参考 `series_options.SplitLineOpts`
            splitline_opts: Union[SplitLineOpts, dict] = SplitLineOpts(),
    ):
        self.opts: dict = {
            "type": type_,
            "name": name,
            "show": is_show,
            "scale": is_scale,
            "nameLocation": name_location,
            "nameGap": name_gap,
            "nameRotate": name_rotate,
            "interval": interval,
            "nameTextStyle": name_textstyle_opts,
            "gridIndex": grid_index,
            "axisLine": axisline_opts,
            "axisTick": axistick_opts,
            "axisLabel": axislabel_opts,
            "axisPointer": axispointer_opts,
            "inverse": is_inverse,
            "position": position,
            "offset": offset,
            "splitNumber": split_number,
            "boundaryGap": boundary_gap,
            "min": min_,
            "max": max_,
            "minInterval": min_interval,
            "maxInterval": max_interval,
            "splitLine": splitline_opts,
            "splitArea": splitarea_opts,
        }


class GridOpts(BasicOpts):
    def __init__(
            self,

            pos_left: Optional[str] = None,
            pos_top: Optional[str] = None,
            pos_right: Optional[str] = None,
            pos_bottom: Optional[str] = None,
            width: Union[Numeric, str, None] = None,
            height: Union[Numeric, str, None] = None,
            is_contain_label: bool = False,
    ):
        self.opts: dict = {
            "left": pos_left,
            "top": pos_top,
            "right": pos_right,
            "bottom": pos_bottom,
            "width": width,
            "height": height,
            "containLabel": is_contain_label,
        }


class Grid3DOpts(BasicOpts):
    def __init__(
            self,
            width: Numeric = 200,
            height: Numeric = 100,
            depth: Numeric = 80,
            is_rotate: bool = False,
            rotate_speed: Numeric = 10,
            rotate_sensitivity: Numeric = 1,
    ):
        self.opts: dict = {
            "boxWidth": width,
            "boxHeight": height,
            "boxDepth": depth,
            "viewControl": {
                "autoRotate": is_rotate,
                "autoRotateSpeed": rotate_speed,
                "rotateSensitivity": rotate_sensitivity,
            },
        }


class Axis3DOpts(BasicOpts):
    def __init__(
            self,
            data: Optional[Sequence] = None,
            type_: Optional[str] = None,
            name: Optional[str] = None,
            name_gap: Numeric = 20,
            min_: Union[str, Numeric, None] = None,
            max_: Union[str, Numeric, None] = None,
            splitnum: Optional[Numeric] = None,
            interval: Optional[Numeric] = None,
            margin: Numeric = 8,
            textstyle_opts: Union[TextStyleOpts, dict, None] = None,
    ):
        self.opts: dict = {
            "data": data,
            "name": name,
            "nameGap": name_gap,
            "nameTextStyle": textstyle_opts,
            "splitNum": splitnum,
            "type": type_,
            "min": min_,
            "max": max_,
            "axisLabel": {"margin": margin, "interval": interval},
        }


class ParallelOpts(BasicOpts):
    def __init__(
            self,
            pos_left: str = "5%",
            pos_right: str = "13%",
            pos_bottom: str = "10%",
            pos_top: str = "20%",
            layout: Optional[str] = None,
    ):
        self.opts: dict = {
            "left": pos_left,
            "right": pos_right,
            "bottom": pos_bottom,
            "top": pos_top,
            "layout": layout,
        }


class ParallelAxisOpts(BasicOpts):
    def __init__(
            self,
            dim: Numeric,
            name: str,
            data: Sequence = None,
            type_: Optional[str] = None,
            min_: Union[str, Numeric, None] = None,
            max_: Union[str, Numeric, None] = None,
            is_scale: bool = False,
    ):
        self.opts: dict = {
            "dim": dim,
            "name": name,
            "data": data,
            "type": type_,
            "min": min_,
            "max": max_,
            "scale": is_scale,
        }


class RadarIndicatorItem(BasicOpts):
    def __init__(
            self,
            name: Optional[str] = None,
            min_: Optional[Numeric] = None,
            max_: Optional[Numeric] = None,
            color: Optional[str] = None,
    ):
        self.opts: dict = {"name": name, "max": max_, "min": min_, "color": color}


class CalendarOpts(BasicOpts):
    def __init__(
            self,

            # calendar组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Optional[str] = None,

            # calendar组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Optional[str] = None,

            # calendar组件离容器右侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            # 默认自适应。
            pos_right: Optional[str] = None,

            # calendar组件离容器下侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            # 默认自适应。
            pos_bottom: Optional[str] = None,

            # 日历坐标的布局朝向。可选：
            # 'horizontal', 'vertical'
            orient: Optional[str] = None,

            # 必填，日历坐标的范围 支持多种格式，使用示例：
            # 某一年 range: 2017
            # 某个月 range: '2017-02'
            # 某个区间 range: ['2017-01-02', '2017-02-23']
            # 注意 此写法会识别为['2017-01-01', '2017-02-01']
            # range: ['2017-01', '2017-02']
            range_: Union[str, Sequence, int] = None,

            # 星期轴的样式，参考 `series_options.LabelOpts`
            daylabel_opts: Union[LabelOpts, dict, None] = None,

            # 月份轴的样式，参考 `series_options.LabelOpts`
            monthlabel_opts: Union[LabelOpts, dict, None] = None,

            # 年份的样式，参考 `series_options.LabelOpts`
            yearlabel_opts: Union[LabelOpts, dict, None] = None,
    ):
        self.opts: dict = {
            "left": pos_left,
            "top": pos_top,
            "right": pos_right,
            "bottom": pos_bottom,
            "orient": orient,
            "range": range_,
            "dayLabel": daylabel_opts,
            "monthLabel": monthlabel_opts,
            "yearLabel": yearlabel_opts,
        }


class SingleAxisOpts(BasicOpts):
    def __init__(
            self,

            # 坐标轴名称。
            name: Optional[str] = None,

            # 坐标轴刻度最大值。
            # 可以设置成特殊值 'dataMax'，此时取数据在该轴上的最大值作为最大刻度。
            # 不设置时会自动计算最大值保证坐标轴刻度的均匀分布。
            # 在类目轴中，也可以设置为类目的序数（如类目轴 data: ['类A', '类B', '类C'] 中，序数 2 表示 '类C'。
            # 也可以设置为负数，如 -3）。
            max_: Union[str, Numeric, None] = None,

            # 坐标轴刻度最小值。
            # 可以设置成特殊值 'dataMin'，此时取数据在该轴上的最小值作为最小刻度。
            # 不设置时会自动计算最小值保证坐标轴刻度的均匀分布。
            # 在类目轴中，也可以设置为类目的序数（如类目轴 data: ['类A', '类B', '类C'] 中，序数 2 表示 '类C'。
            # 也可以设置为负数，如 -3）。
            min_: Union[str, Numeric, None] = None,

            # single 组件离容器左侧的距离。
            # left 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'left', 'center', 'right'。
            # 如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。
            pos_left: Optional[str] = None,

            # single组件离容器右侧的距离。
            # right 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_right: Optional[str] = None,

            # single组件离容器上侧的距离。
            # top 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比，
            # 也可以是 'top', 'middle', 'bottom'。
            # 如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。
            pos_top: Optional[str] = None,

            # single组件离容器下侧的距离。
            # bottom 的值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。
            pos_bottom: Optional[str] = None,

            # single 组件的宽度。默认自适应。
            width: Optional[str] = None,

            # single 组件的高度。默认自适应。
            height: Optional[str] = None,

            # 轴的朝向，默认水平朝向，可以设置成 'vertical' 垂直朝向。
            orient: Optional[str] = None,

            # 坐标轴类型。可选：
            # 'value': 数值轴，适用于连续数据。
            # 'category': 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。
            # 'time': 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，
            # 例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。
            # 'log' 对数轴。适用于对数数据。
            type_: Optional[str] = None,
    ):
        self.opts: dict = {
            "name": name,
            "max": max_,
            "min": min_,
            "left": pos_left,
            "right": pos_right,
            "top": pos_top,
            "bottom": pos_bottom,
            "width": width,
            "height": height,
            "orient": orient,
            "type": type_,
        }


class RadiusAxisItem(BasicOpts):
    def __init__(
            self,
            value: Optional[str] = None,
            textstyle_opts: Union[TextStyleOpts, dict, None] = None,
    ):
        self.opts: dict = {"value": value, "textStyle": textstyle_opts}


class AngleAxisItem(RadiusAxisItem):
    def __init__(
            self,
            value: Optional[str] = None,
            textstyle_opts: Optional[TextStyleOpts] = None,
    ):
        super().__init__(value, textstyle_opts)


class RadiusAxisOpts(BasicOpts):
    def __init__(
            self,
            polar_index: Optional[int] = None,
            data: Optional[Sequence[Union[RadiusAxisItem, dict, str]]] = None,
            boundary_gap: Union[bool, Sequence] = None,
            type_: Optional[str] = None,
            name: Optional[str] = None,
            name_location: Optional[str] = None,
            min_: Union[str, Numeric, None] = None,
            max_: Union[str, Numeric, None] = None,
            is_scale: bool = False,
            splitline_opts: Union[SplitLineOpts, dict, None] = None,
            axistick_opts: Union[AxisTickOpts, dict, None] = None,
            axisline_opts: Union[AxisLineOpts, dict, None] = None,
            axislabel_opts: Union[LabelOpts, dict, None] = None,
            z: Optional[int] = None,
    ):
        _data = []
        if data:
            for d in data:
                if isinstance(d, RadiusAxisItem):
                    d = d.opts
                _data.append(d)

        self.opts: dict = {
            "polarIndex": polar_index,
            "type": type_,
            "data": data,
            "boundaryGap": boundary_gap,
            "name": name,
            "nameLocation": name_location,
            "min": min_,
            "max": max_,
            "scale": is_scale,
            "splitLine": splitline_opts,
            "axisTick": axistick_opts,
            "axisLine": axisline_opts,
            "axisLabel": axislabel_opts,
            "z": z,
        }


class AngleAxisOpts(BasicOpts):
    def __init__(
            self,
            polar_index: Optional[int] = None,
            data: Optional[Sequence[Union[AngleAxisItem, Numeric, dict, str]]] = None,
            start_angle: Optional[Numeric] = None,
            is_clockwise: bool = False,
            boundary_gap: Union[bool, Sequence, None] = None,
            type_: Optional[str] = None,
            min_: Union[str, Numeric, None] = None,
            max_: Union[str, Numeric, None] = None,
            splitline_opts: Union[SplitLineOpts, dict, None] = None,
            axisline_opts: Union[AxisLineOpts, dict, None] = None,
            axistick_opts: Union[AxisTickOpts, dict, None] = None,
            axislabel_opts: Union[LabelOpts, dict, None] = None,
            z: Optional[int] = None,
    ):
        _data = []
        if data:
            for d in data:
                if isinstance(d, AngleAxisItem):
                    d = d.opts
                _data.append(d)

        self.opts: dict = {
            "polarIndex": polar_index,
            "startAngle": start_angle,
            "data": data,
            "clockwise": is_clockwise,
            "boundaryGap": boundary_gap,
            "type": type_,
            "min": min_,
            "max": max_,
            "splitLine": splitline_opts,
            "axisLine": axisline_opts,
            "axisTick": axistick_opts,
            "axisLabel": axislabel_opts,
            "z": z,
        }
