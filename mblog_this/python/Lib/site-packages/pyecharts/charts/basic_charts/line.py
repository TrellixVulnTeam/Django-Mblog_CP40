from ... import options as opts
from ... import types
from ...charts.chart import RectChart
from ...globals import ChartType


class Line(RectChart):
    """
    <<< Line Chart >>>

    Line chart is a graph that connects all data points
    with single line to show the change trend of data.
    """

    def add_yaxis(
        self,

            # 系列名称，用于 tooltip 的显示，legend 的图例筛选。
        series_name: str,

            # 系列数据
        y_axis: types.Sequence,
        *,

            # 是否选中图例
        is_selected: bool = True,

            # 是否连接空数据，空数据使用 `None` 填充
        is_connect_nones: bool = False,

            # 使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。
        xaxis_index: types.Optional[types.Numeric] = None,

            # 使用的 y 轴的 index，在单个图表实例中存在多个 y 轴的时候有用。
        yaxis_index: types.Optional[types.Numeric] = None,

            # 系列 label 颜色
        color: types.Optional[str] = None,

            # 是否显示 symbol, 如果 false 则只有在 tooltip hover 的时候显示。
        is_symbol_show: bool = True,

            # 标记的图形。
            # ECharts 提供的标记类型包括 'circle', 'rect', 'roundRect', 'triangle',
            # 'diamond', 'pin', 'arrow', 'none'
            # 可以通过 'image://url' 设置为图片，其中 URL 为图片的链接，或者 dataURI。
        symbol: types.Optional[str] = None,

            # 标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，
            # 例如 [20, 10] 表示标记宽为 20，高为 10。
        symbol_size: types.Union[types.Numeric, types.Sequence] = 4,

    # 数据堆叠，同个类目轴上系列配置相同的　stack　值可以堆叠放置。
        stack: types.Optional[str] = None,

            # 是否平滑曲线
        is_smooth: bool = False,

            # 是否显示成阶梯图
        is_step: bool = False,

            # 是否开启 hover 在拐点标志上的提示动画效果。
        is_hover_animation: bool = True,

            # 标记点配置项，参考 `series_options.MarkPointOpts`
        markpoint_opts: types.MarkPoint = None,

            # 标记线配置项，参考 `series_options.MarkLineOpts`
        markline_opts: types.MarkLine = None,

            # 提示框组件配置项，参考 `series_options.TooltipOpts`
        tooltip_opts: types.Tooltip = None,

            # 图元样式配置项，参考 `series_options.ItemStyleOpts`
        itemstyle_opts: types.ItemStyle = None,

            # 标签配置项，参考 `series_options.LabelOpts`
        label_opts: types.Label = opts.LabelOpts(),

            # 线样式配置项，参考 `series_options.LineStyleOpts`
        linestyle_opts: types.LineStyle = opts.LineStyleOpts(),

            # 填充区域配置项，参考 `series_options.AreaStyleOpts`
        areastyle_opts: types.AreaStyle = opts.AreaStyleOpts(),
    ):
        self._append_color(color)
        self._append_legend(series_name, is_selected)
        # 合并 x 和 y 轴数据，避免当 X 轴的类型设置为 'value' 的时候，
        # X、Y 轴均显示 Y 轴数据
        data = [list(z) for z in zip(self._xaxis_data, y_axis)]

        self.options.get("series").append(
            {
                "type": ChartType.LINE,
                "name": series_name,
                "connectNulls": is_connect_nones,
                "xAxisIndex": xaxis_index,
                "yAxisIndex": yaxis_index,
                "symbol": symbol,
                "symbolSize": symbol_size,
                "showSymbol": is_symbol_show,
                "smooth": is_smooth,
                "step": is_step,
                "stack": stack,
                "data": data,
                "hoverAnimation": is_hover_animation,
                "label": label_opts,
                "lineStyle": linestyle_opts,
                "areaStyle": areastyle_opts,
                "markPoint": markpoint_opts,
                "markLine": markline_opts,
                "tooltip": tooltip_opts,
                "itemStyle": itemstyle_opts,
            }
        )
        return self
