from ... import options as opts
from ... import types
from ...charts.chart import Chart
from ...globals import ChartType


class Sunburst(Chart):
    """
    <<< Sunburst >>

    Sunburst graphs are composed of multiple layers of ring graphs.
    In terms of data structure, inner circle is the parent node of outer circle.
    Therefore, it can represent local and global proportions like pie charts and
    hierarchical relationships like rectangle tree graphs.
    """

    def add(
        self,

            # 系列名称，用于 tooltip 的显示，legend 的图例筛选
        series_name: str,

            # 数据项。
        data_pair: types.Sequence,
        *,


    # 旭日图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。
    # 支持设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度。
        center: types.Optional[types.Sequence] = None,

            # 旭日图的半径。可以为如下类型：
            # Sequence.<int|str>：数组的第一项是内半径，第二项是外半径
        radius: types.Optional[types.Sequence] = None,

            # 当鼠标移动到一个扇形块时，可以高亮相关的扇形块。
            # 'descendant'：高亮该扇形块和后代元素，其他元素将被淡化；
            # 'ancestor'：高亮该扇形块和祖先元素；
            # 'self'：只高亮自身；
            # 'none'：不会淡化其他元素。
        highlight_policy: str = "descendant",

            # 点击节点后的行为。可取值为：false：节点点击无反应。
            # 'rootToNode'：点击节点后以该节点为根结点。
            # 'link'：如果节点数据中有 link 点击节点后会进行超链接跳转。
        node_click: str = "rootToNode",

            # 扇形块根据数据 value 的排序方式，如果未指定 value，则其值为子元素 value 之和。
            # 'desc'：降序排序；
            # 'asc'：升序排序；
            # 'null'：表示不排序，使用原始数据的顺序；
            # 使用 javascript 回调函数进行排列：
        sort_: types.Optional[types.JSFunc] = "desc",

            # 旭日图多层级配置
            # 目前配置方式可以参考: https://www.echartsjs.com/option.html#series-sunburst.levels
        levels: types.Optional[types.Sequence] = None,

            # 标签配置项，参考 `series_options.LabelOpts`
        label_opts: types.Label = opts.LabelOpts(),

            # 图元样式的配置，参考 `series_options.ItemStyleOpts`
        itemstyle_opts: types.ItemStyle = None,
    ):
        if not center:
            center = ["50%", "50%"]
        if not radius:
            radius = ["0%", "75%"]

        self.options.get("series").append(
            {
                "type": ChartType.SUNBURST,
                "name": series_name,
                "data": data_pair,
                "center": center,
                "radius": radius,
                "highlightPolicy": highlight_policy,
                "nodeClick": node_click,
                "sort": sort_,
                "levels": levels,
                "label": label_opts,
                "itemStyle": itemstyle_opts,
            }
        )
        return self
