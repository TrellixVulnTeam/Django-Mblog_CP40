from ... import options as opts
from ... import types
from ...charts.chart import Chart
from ...globals import ChartType


class Pie(Chart):
    """
    <<< Pie >>>

    The pie chart is mainly used to represent the proportion of data of
    different categories in the total. Each radian represents the ratio of
    the number of data points.
    """

    def add(
        self,
            # 系列名称，用于Tooltip提示文本显示和legend图例筛选
        series_name: str,

            # 系列数据项，格式为 [(key1, value1), (key2, value2)]
        data_pair: types.Sequence,
        *,

            # 系列 label 颜色
        color: types.Optional[str] = None,

            # 饼图的半径，数组的第一项是内半径，第二项是外半径
            # 默认设置成百分比，相对于容器高宽中较小的一项的一半
        radius: types.Optional[types.Sequence] = None,

            # 饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标
            # 默认设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度
        center: types.Optional[types.Sequence] = None,

            # 是否展示成南丁格尔图，通过半径区分数据大小，有'radius'和'area'两种模式。
            # radius：扇区圆心角展现数据的百分比，半径展现数据的大小
            # area：所有扇区圆心角相同，仅通过半径展现数据大小
        rosetype: types.Optional[str] = None,

            # 饼图的扇区是否是顺时针排布。
        is_clockwise: bool = True,

            # 标签配置项，参考 `series_options.LabelOpts`
        label_opts: types.Label = opts.LabelOpts(),

            # 提示框组件配置项，参考 `series_options.TooltipOpts`
        tooltip_opts: types.Tooltip = None,

            # 图元样式配置项，参考 `series_options.ItemStyleOpts`
        itemstyle_opts: types.ItemStyle = None,
    ):
        data = [{"name": n, "value": v} for n, v in data_pair]

        if not radius:
            radius = ["0%", "75%"]
        if not center:
            center = ["50%", "50%"]

        self._append_color(color)
        for a, _ in data_pair:
            self.options.get("legend")[0].get("data").append(a)

        _dlst = self.options.get("legend")[0].get("data")
        _dset = list(set(_dlst))
        _dset.sort(key=_dlst.index)
        self.options.get("legend")[0].update(data=list(_dset))

        self.options.get("series").append(
            {
                "type": ChartType.PIE,
                "name": series_name,
                "clockwise": is_clockwise,
                "data": data,
                "radius": radius,
                "center": center,
                "roseType": rosetype,
                "label": label_opts,
                "tooltip": tooltip_opts,
                "itemStyle": itemstyle_opts,
            }
        )
        return self
