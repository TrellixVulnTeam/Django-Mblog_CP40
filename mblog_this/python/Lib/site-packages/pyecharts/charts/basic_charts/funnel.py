from ... import options as opts
from ... import types
from ...charts.chart import Chart
from ...globals import ChartType


# 漏斗图表
class Funnel(Chart):
    """
    <<< Funnel >>>

        Funnel diagram is suitable for one-way analysis of single process
        with standardized business process, long cycle and multiple links.
        Through comparison of business data of each link in the funnel,
        the link where the potential problems can be found intuitively,
        and then decisions can be made.
    """

    def add(
            self,
            # 系列名称，用于 tooltip（提示框配置） 的显示，legend 的图例筛选。
            series_name: str,
            # 系列数据项，格式为 [(key1, value1), (key2, value2)]
            data_pair: types.Sequence,
            *,

            # 是否选中图例
            is_selected: bool = True,

            # 系列 label 颜色
            color: types.Optional[str] = None,

            # 数据排序， 可以取 'ascending'，'descending'，'none'（表示按 data 顺序）
            sort_: str = "descending",

            # 数据图形间距
            gap: types.Numeric = 0,

            # 标签配置项，参考 `series_options.LabelOpts`
            label_opts: types.Label = opts.LabelOpts(),
            # 提示框组件配置项，参考 `series_options.TooltipOpts`
            tooltip_opts: types.Tooltip = None,
            # 图元样式配置项，参考 `series_options.ItemStyleOpts`
            itemstyle_opts: types.ItemStyle = None,
    ):
        self._append_color(color)
        data = [{"name": n, "value": v} for n, v in data_pair]
        for a, _ in data_pair:
            self._append_legend(a, is_selected)  # 向字典中的data向添加legend

        _dset = set(self.options.get("legend")[0].get("data"))
        self.options.get("legend")[0].update(data=list(_dset))  # 更新data

        self.options.get("series").append(
            {
                "type": ChartType.FUNNEL,
                "name": series_name,
                "data": data,
                "sort": sort_,
                "gap": gap,
                "label": label_opts,
                "tooltip": tooltip_opts,
                "itemStyle": itemstyle_opts,
            }
        )
        return self
